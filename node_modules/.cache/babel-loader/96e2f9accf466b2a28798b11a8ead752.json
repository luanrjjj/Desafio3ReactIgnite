{"ast":null,"code":"var _jsxFileName = \"/home/luan/Documentos/IgniteDesafio3/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const updatedCart = [...cart];\n      const productExist = updatedCart.find(product => product.id === productId);\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExist ? productExist.amount : 0;\n      const amount = currentAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      if (productExist) {\n        productExist.amount = amount;\n      } else {\n        const product = await api.get(`/products/${productId}`);\n        const newProduct = { ...product.data,\n          amount: 1\n        };\n        updatedCart.push(newProduct);\n      }\n\n      setCart(updatedCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(updatedCart));\n    } catch {\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const updatedCart = [...cart];\n      const productExist = updatedCart.find(product => product.id === productId);\n\n      if (productExist) {\n        var i;\n\n        for (i = 0; i < updatedCart.length; i++) {\n          console.log(i);\n\n          if (updatedCart[i].id === productId) {\n            updatedCart.splice(i, 1);\n            setCart(updatedCart);\n            localStorage.setItem('@RocketShoes:cart', JSON.stringify(updatedCart));\n          }\n        }\n      } else {\n        toast.error(\"Erro na remoção do produto\");\n      }\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n\n      if (amount >= stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n      } else {\n        const updatedCart = [...cart];\n        const productExist = updatedCart.find(product => product.id === productId);\n\n        if (productExist && amount >= 1) {\n          const currentAmount = productExist ? productExist.amount : 0;\n          const newAmount = currentAmount + 1;\n          const newProductAmount = { ...productExist,\n            amount: newAmount\n          };\n          updatedCart.push(newProductAmount);\n          setCart(updatedCart);\n          localStorage.setItem('@RocketShoes:cart', JSON.stringify(updatedCart));\n        }\n      }\n    } catch {\n      toast.error('Erro na alteração de quantidade do produto');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"mRn4dDZ0qjEi5SsNBOaxG4g/mC8=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/luan/Documentos/IgniteDesafio3/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","updatedCart","productExist","find","product","id","stock","get","stockAmount","data","amount","currentAmount","error","newProduct","push","setItem","stringify","removeProduct","i","length","console","log","splice","updateProductAmount","newAmount","newProductAmount","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState, useEffect } from 'react';\nimport { toast, useToast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface ProductFormatted extends Product {\n  priceFormatted: string;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\n\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n\n\n  const [cart, setCart] = useState<Product[]>(() => {\n  \n\n\n    const storagedCart =localStorage.getItem('RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      const updatedCart = [...cart];\n      const productExist = updatedCart.find(product => product.id === productId);\n      const stock  = await api.get (`/stock/${productId}`);\n\n      \n      const stockAmount = stock.data.amount;\n      const currentAmount = productExist ? productExist.amount : 0;\n      const amount = currentAmount + 1 ;\n\n\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n      if (productExist) {\n        productExist.amount = amount\n      }  else {\n        const product = await api.get(`/products/${productId}`)\n\n        const newProduct = {\n          ...product.data,\n          amount: 1 \n        }\n\n        updatedCart.push(newProduct);\n      }\n\n      setCart(updatedCart)\n    localStorage.setItem('@RocketShoes:cart',JSON.stringify(updatedCart))\n\n    \n    } catch {\n      toast.error('Erro na adição do produto')\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n\n      \n      const updatedCart = [...cart]\n      const productExist = updatedCart.find(product => product.id === productId)\n  \n\n      if (productExist) {\n      var i ;\n      for (i=0;i<updatedCart.length; i++) {\n        console.log(i)\n        if (updatedCart[i].id === productId) {\n        updatedCart.splice(i,1)\n        setCart(updatedCart)\n        localStorage.setItem('@RocketShoes:cart',JSON.stringify(updatedCart))\n      }\n    }\n    } else {\n      toast.error(\"Erro na remoção do produto\");\n    }\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n\n      const stock   = await api.get (`/stock/${productId}`)\n      const stockAmount = stock.data.amount\n\n\n      if (amount >= stockAmount) {\n\n        toast.error('Quantidade solicitada fora de estoque');\n      }  else { \n\n      const updatedCart = [...cart]\n      const productExist = updatedCart.find(product => product.id === productId)\n\n\n      if (productExist && amount >= 1) {\n      \n      const currentAmount = productExist ? productExist.amount : 0\n     \n      const newAmount = currentAmount + 1 \n\n\n      \n  \n      const newProductAmount = {\n        ...productExist,\n        amount: newAmount\n      }\n\n    updatedCart.push(newProductAmount)\n    setCart(updatedCart)\n\n  localStorage.setItem('@RocketShoes:cart',JSON.stringify(updatedCart))\n    } \n  }\n    } catch {\n      toast.error('Erro na alteração de quantidade do produto')\n    }\n  };\n\n\n\n  \n\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}