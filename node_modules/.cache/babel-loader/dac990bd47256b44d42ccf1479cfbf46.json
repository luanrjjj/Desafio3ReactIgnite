{"ast":null,"code":"var _jsxFileName = \"/home/luan/Documentos/IgniteDesafio3/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nconst [products, setProducts] = useState([]);\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    // const storagedCart = Buscar dados do localStorage\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      cart.map(product => {\n        if (product.id === productId) {\n          const newProductCart = {\n            id: product.id,\n            title: product.title,\n            price: product.price,\n            image: product.image,\n            amount: product.amount + 1\n          };\n          setCart([...cart, newProductCart]);\n        }\n      });\n    } catch {\n      toast.error('Quantidade solicitada fora de estoque');\n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  useEffect(() => {\n    async function loadProducts() {\n      fetch('http://localhost:3333/products').then(response => response.json()).then(data => setProducts(data));\n    }\n\n    loadProducts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"9j1AfCBfqLxT6hPAlrdZrr08Wew=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/luan/Documentos/IgniteDesafio3/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","useEffect","toast","CartContext","products","setProducts","CartProvider","children","cart","setCart","addProduct","productId","map","product","id","newProductCart","title","price","image","amount","error","removeProduct","updateProductAmount","loadProducts","fetch","then","response","json","data","useCart","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,EAAyDC,SAAzD,QAA0E,OAA1E;AACA,SAASC,KAAT,QAAgC,gBAAhC;;AAwBA,MAAMC,WAAW,gBAAGL,aAAa,CAAkB,EAAlB,CAAjC;AAGA,MAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAqB,EAArB,CAAxC;AAIA,OAAO,SAASM,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoE;AAAA;;AAGzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAY,MAAM;AAIhD;AAEA;AACA;AACA;AAEA,WAAO,EAAP;AACD,GAX+B,CAAhC;;AAaA,QAAMU,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAC9C,QAAI;AACFH,MAAAA,IAAI,CAACI,GAAL,CAASC,OAAO,IAAI;AAClB,YAAIA,OAAO,CAACC,EAAR,KAAeH,SAAnB,EAA8B;AAE9B,gBAAMI,cAAc,GAAI;AACtBD,YAAAA,EAAE,EAACD,OAAO,CAACC,EADW;AAEtBE,YAAAA,KAAK,EAACH,OAAO,CAACG,KAFQ;AAGtBC,YAAAA,KAAK,EAACJ,OAAO,CAACI,KAHQ;AAItBC,YAAAA,KAAK,EAACL,OAAO,CAACK,KAJQ;AAKtBC,YAAAA,MAAM,EAAEN,OAAO,CAACM,MAAR,GAAiB;AALH,WAAxB;AAQAV,UAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAASO,cAAT,CAAD,CAAP;AACD;AAEA,OAdD;AAiBD,KAlBD,CAkBE,MAAM;AACNb,MAAAA,KAAK,CAACkB,KAAN,CAAY,uCAAZ;AACD;AACF,GAtBD;;AAwBA,QAAMC,aAAa,GAAIV,SAAD,IAAuB;AAC3C,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GAND;;AAQA,QAAMW,mBAAmB,GAAG,OAAO;AACjCX,IAAAA,SADiC;AAEjCQ,IAAAA;AAFiC,GAAP,KAGD;AACzB,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GATD;;AAaAlB,EAAAA,SAAS,CAAC,MAAM;AAGd,mBAAesB,YAAf,GAA8B;AAC3BC,MAAAA,KAAK,CAAC,gCAAD,CAAL,CACFC,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADf,EAEFF,IAFE,CAEGG,IAAI,IAAIvB,WAAW,CAACuB,IAAD,CAFtB;AAKF;;AACDL,IAAAA,YAAY;AACb,GAXQ,EAWN,EAXM,CAAT;AAcA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEf,MAAAA,IAAF;AAAQE,MAAAA,UAAR;AAAoBW,MAAAA,aAApB;AAAmCC,MAAAA;AAAnC,KADT;AAAA,cAGGf;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAlFeD,Y;;KAAAA,Y;AAoFhB,OAAO,SAASuB,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAG/B,UAAU,CAACI,WAAD,CAA1B;AAEA,SAAO2B,OAAP;AACD;;IAJeD,O","sourcesContent":["import { createContext, ReactNode, useContext, useState, useEffect } from 'react';\nimport { toast, useToast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface ProductFormatted extends Product {\n  priceFormatted: string;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\n\nconst [products, setProducts] = useState<ProductFormatted[]>([]);\n\n\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n\n\n  const [cart, setCart] = useState<Product[]>(() => {\n  \n\n\n    // const storagedCart = Buscar dados do localStorage\n\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      cart.map(product => {\n        if (product.id === productId) {\n\n        const newProductCart  = {\n          id:product.id,\n          title:product.title,\n          price:product.price,\n          image:product.image,\n          amount: product.amount + 1 \n        }\n\n        setCart([...cart,newProductCart])\n      }\n        \n      })\n\n     \n    } catch {\n      toast.error('Quantidade solicitada fora de estoque')\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n\n\n  useEffect(() => {\n\n  \n    async function loadProducts() {\n       fetch('http://localhost:3333/products')\n    .then(response => response.json())\n    .then(data => setProducts(data))\n\n    \n    }\n    loadProducts();\n  }, []);\n\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}